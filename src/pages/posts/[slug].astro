---
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getPageNumbers from "@utils/getPageNumbers";
import { SITE } from "@config";
import type { Blog } from "types/microcms";
import { MicroCMSUtils, microcmsFactory } from "@utils/microcms";

export interface Props {
    post: Blog;
}

export async function getStaticPaths() {
    const blogResponse = await MicroCMSUtils.getAllContents({
        getListFn: microcmsFactory.blogs.getList,
    });
    const blogs = blogResponse.contents;

    const postResult = blogs.map(blog => ({
        params: { slug: blog.id },
        props: { post: blog },
    }));

    const pagePaths = getPageNumbers(blogResponse.totalCount).map(pageNum => ({
        params: { slug: String(pageNum) },
    }));

    return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const blogResponse = await MicroCMSUtils.getAllContents({
    getListFn: microcmsFactory.blogs.getList,
});
const blogs = blogResponse.contents;

const totalPages = getPageNumbers(blogResponse.totalCount);

const currentPage =
    slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
        ? Number(slug)
        : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedPosts = blogs.slice(startPost, lastPost);
---

{
    post ? (
        <PostDetails post={post} />
    ) : (
        <Posts
            posts={paginatedPosts}
            pageNum={currentPage}
            totalPages={totalPages.length}
        />
    )
}
