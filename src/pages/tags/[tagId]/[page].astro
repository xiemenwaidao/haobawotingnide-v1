---
import { SITE } from "@config";
import Posts from "@layouts/Posts.astro";
import getPageNumbers from "@utils/getPageNumbers";
import { MicroCMSUtils, microcmsFactory } from "@utils/microcms";
import type { Tag } from "types/microcms";

interface Props {
    tag: Tag;
}

export async function getStaticPaths() {
    const tagResponse = await MicroCMSUtils.getAllContents({
        getListFn: microcmsFactory.tags.getList,
    });
    const tags = tagResponse.contents;

    const paths = await Promise.all(
        tags.map(async tag => {
            const blogResponse = await MicroCMSUtils.getAllContents({
                getListFn: microcmsFactory.blogs.getList,
                options: { queries: { filters: `tag[contains]${tag.id}` } },
            });

            return getPageNumbers(blogResponse.totalCount).map(pageNum => ({
                params: { tagId: tag.id, page: String(pageNum) },
            }));
        })
    );

    return paths.flat();
}

const { tagId, page } = Astro.params;

const blogResponse = await MicroCMSUtils.getAllContents({
    getListFn: microcmsFactory.blogs.getList,
    options: { queries: { filters: `tag[contains]${tagId}` } },
});
const blogs = blogResponse.contents;

const totalPages = getPageNumbers(blogResponse.totalCount);

const currentPage = Number(page);
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedPosts = blogs.slice(startPost, lastPost);
---

<Posts
    posts={paginatedPosts}
    pageNum={currentPage}
    totalPages={totalPages.length}
    type="tags"
    tagId={tagId!}
/>
